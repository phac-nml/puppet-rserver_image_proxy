# adapted from https://github.com/jupyterhub/jupyter-rsession-proxy
import getpass
import os
import pathlib
import shutil
import subprocess
import tempfile
import pwd
from textwrap import dedent
from urllib.parse import urlparse, urlunparse

def get_rstudio_executable(prog):
    if shutil.which(prog):
        return prog
    raise FileNotFoundError(f'Could not find {prog} in PATH')

def get_icon_path():
    return os.path.join(
        os.path.dirname(os.path.abspath(__file__)), 'icons', 'rstudio.svg'
    )

def rewrite_netloc(response, request):
    for header, v in response.headers.get_all():
        if header == "Location":
            u = urlparse(v)
            if u.netloc != request.host:
                response.headers[header] = urlunparse(u._replace(netloc=request.host))

def get_system_user():
    try:
        user = pwd.getpwuid(os.getuid())[0]
    except:
        user = os.environ.get('NB_USER', getpass.getuser())
    return(user)

def image_type_setup(name):
    def _get_env(port):
        return dict(USER=get_system_user())

    def db_config(db_dir):
        db_conf = dedent("""
            provider=sqlite
            directory={directory}
        """).format(directory=db_dir)
        f = tempfile.NamedTemporaryFile(mode='w', delete=False, dir=db_dir)
        db_config_name = f.name
        f.write(db_conf)
        f.close()
        return db_config_name

    def _support_arg(arg):
        ret = subprocess.check_output([get_rstudio_executable(f'{name}-rserver'), '--help'])
        return ret.decode().find(arg) != -1

    def _get_cmd(port):
        ntf = tempfile.NamedTemporaryFile()

        server_data_dir = tempfile.mkdtemp()
        database_config_file = db_config(server_data_dir)

        cmd = [
            get_rstudio_executable(f'{name}-rserver'),
            '--auth-none=1',
            '--www-frame-origin=same',
            '--www-port=' + str(port),
            '--www-verify-user-agent=0',
            '--secure-cookie-key-file=' + ntf.name,
            '--server-user=' + get_system_user(),
            '--www-root-path={base_url}rstudio-' + name + '/',
            '--server-data-dir=' + server_data_dir,
            '--database-config-file=' + database_config_file,
        ]

        return cmd

    def _get_timeout(default=15):
        try:
            return float(os.getenv('RSERVER_TIMEOUT', default))
        except Exception:
            return default

    server_process = {
        'command': _get_cmd,
        'timeout': _get_timeout(),
        'environment': _get_env,
        'rewrite_response': rewrite_netloc,
        'launcher_entry': {
            'title': 'RStudio',
            'icon_path': get_icon_path()
        }
    }
    return server_process

<% $rserver_images.each |$image| { -%>
def setup_rserver_<%=$image%>():
    return image_type_setup('<%=$image%>')
<% } -%>
